#GET PRODUCTS (FOR CATALOG AND MAIN PAGE)
/*SELECT products_attributes.id AS id,
products.title AS title,
categories.title AS category,
GROUP_CONCAT(products_attributes.photo SEPARATOR ';') AS photo,
GROUP_CONCAT(products_attributes.price SEPARATOR ';') AS price,
GROUP_CONCAT(products_attributes.color SEPARATOR ';') AS color,
GROUP_CONCAT(products_attributes.size SEPARATOR ';') AS size,
MIN(products_attributes.price) AS min_price
FROM products
INNER JOIN products_attributes
ON products_attributes.productID = products.id
INNER JOIN categories 
ON products.categoryID = categories.id
WHERE categories.title = "Одежда"
GROUP BY products_attributes.productID
ORDER BY min_price
ORDER BY RAND()
LIMIT 4*/


#VIEW_producuts_in_stock
SELECT
products_attributes.id AS id,
IFNULL(SUM(products_in.amountIN),0) AS in_stock
FROM (products_attributes
LEFT JOIN products_in
     ON (products_attributes.id = products_in.productAttributeID))
GROUP BY products_attributes.id)


#GET AMOOUNT OF SELECTED PRODUCT IN STOCK
SELECT products_in_stock.id AS id,
products_in_stock.in_stock,
IFNULL(products_out.amountOUT,0) AS sold,
products_in_stock.in_stock - IFNULL(SUM(products_out.amountOUT),0) AS current_in_stock
FROM products_in_stock
LEFT JOIN products_out
ON products_in_stock.id = products_out.productAttributeID
WHERE products_in_stock.id = "YOUR ID"
GROUP BY id


#GET DETAILS OF SELECTED PRODUCT
SELECT products.title AS title,
categories.title AS category,
GROUP_CONCAT(products_attributes.photo SEPARATOR ';') AS photo,
GROUP_CONCAT(products_attributes.price SEPARATOR ';') AS price,
GROUP_CONCAT(products_attributes.color SEPARATOR ';') AS color,
GROUP_CONCAT(products_attributes.size SEPARATOR ';') AS size,
products.description
FROM products
INNER JOIN products_attributes
ON products_attributes.productID = products.id
INNER JOIN categories 
ON products.categoryID = categories.id
WHERE product.id = "YOUR ID"
GROUP BY products_attributes.productID


#TRIGGER VALIDATOR: CHECK IF NEW OUTCOME AMOUNT CANT BE MORE THEN WE HAVE IN STOCK CURRENTLY
DECLARE whereID INT;
DECLARE currentInStock INT;
SET whereID = NEW.productAttributeID;
SELECT products_in_stock.in_stock-IFNULL(SUM(products_out.amountOUT),0)
INTO currentInStock
FROM products_in_stock
LEFT JOIN products_out
ON products_in_stock.id = products_out.productAttributeID
WHERE products_in_stock.id = whereID;
IF (currentInStock - NEW.amountOUT) < 0 THEN
SET NEW.amountOUT = 0;
END IF; 

#TRIGGER LOGGER: ADD INFO IN LOGGER TABLE
DECLARE str VARCHAR(50);
IF NEW.amountOUT = 0 THEN
SELECT "ERROR"
INTO str;
ELSE
SELECT CONCAT('Продажа товара id = ',NEW.productAttributeID) 
INTO str;
END IF;
INSERT INTO logger(`action`,amount,`date`) VALUES (str,NEW.amountOUT,NEW.dateOUT);

SELECT active_orders.id AS id,
userID,
paymentMethod,
shippingMethodID,
shippingAddressID,
city,
region,
street,
building,
'index',
totalProductPrice,
deliveryPrice,
discountAmount,
totalPrice,
datePlaced,
'comment',
GROUP_CONCAT(products_orders.productsAttributesID SEPARATOR ';') AS productAttributeID,
GROUP_CONCAT(products_attributes.productID SEPARATOR ';')  AS productID,
GROUP_CONCAT(products.title SEPARATOR ';') AS productTitle,
GROUP_CONCAT(products.description SEPARATOR ';') AS description,
GROUP_CONCAT(categories.title SEPARATOR ';') AS category,
GROUP_CONCAT(products_attributes.photo SEPARATOR ';') AS photo,
GROUP_CONCAT(products_attributes.price SEPARATOR ';') AS price,
GROUP_CONCAT(products_attributes.color SEPARATOR ';') AS color,
GROUP_CONCAT(products_attributes.size SEPARATOR ';') AS size,
GROUP_CONCAT(products_orders.amount SEPARATOR ';') AS amount
FROM active_orders
INNER JOIN shipping_addresses ON active_orders.shippingAddressID = shipping_addresses.id
INNER JOIN products_orders ON active_orders.id = products_orders.activeOrderID
INNER JOIN products_attributes ON products_orders.productsAttributesID = products_attributes.id
INNER JOIN products ON products_attributes.productID = products.id
INNER JOIN categories ON products.categoryID = categories.id
GROUP BY active_orders.id;

